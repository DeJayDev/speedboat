From 8a5c53ec516265f2edaf65e675f8f589a3b1d56b Mon Sep 17 00:00:00 2001
From: DeJay <contact@dejaydev.com>
Date: Tue, 24 Dec 2019 19:11:43 -0600
Subject: [PATCH 22/24] DM Users on Punish

---
 .gitignore                     |  3 ++-
 .vscode/settings.json          |  2 +-
 frontend/src/index.html        |  2 +-
 rowboat/constants.py           |  9 +++-----
 rowboat/models/guild.py        |  2 +-
 rowboat/models/notification.py |  4 ++--
 rowboat/models/user.py         | 42 +++++++++++++++++++++++++++++++++-
 rowboat/plugins/admin.py       | 13 ++++-------
 rowboat/plugins/core.py        |  2 +-
 rowboat/plugins/modlog/core.py |  6 +----
 rowboat/plugins/utilities.py   | 21 +++++++----------
 11 files changed, 66 insertions(+), 40 deletions(-)

diff --git a/.gitignore b/.gitignore
index 2d9f1a4..dfe58e7 100644
--- a/.gitignore
+++ b/.gitignore
@@ -7,4 +7,5 @@ config.yaml
 Dockerfile
 docker-compose.yml
 rowboat/constants.py
-src/
\ No newline at end of file
+src/
+.vscode
\ No newline at end of file
diff --git a/.vscode/settings.json b/.vscode/settings.json
index 81af87d..e959d1f 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -1,5 +1,5 @@
 {
-    "python.pythonPath": "/usr/local/opt/python/bin/python3.7",
+    "python.pythonPath": "C:\\Users\\DeJay\\.windows-build-tools\\python27\\python.exe",
     "python.linting.pylintEnabled": true,
     "python.linting.enabled": true
 }
\ No newline at end of file
diff --git a/frontend/src/index.html b/frontend/src/index.html
index 38bf60f..09c3eb0 100644
--- a/frontend/src/index.html
+++ b/frontend/src/index.html
@@ -9,7 +9,7 @@
   <link href="/static/css/style.css" rel="stylesheet">
   <link href="/static/css/font-awesome.min.css" rel="stylesheet" type="text/css">
   <link href="/static/css/metisMenu.min.css" rel="stylesheet" type="text/css">
-  <link rel="stylesheet" href="https://unpkg.com/react-table@latest/react-table.css">
+  <link rel="stylesheet" href="https://unpkg.com/react-table@6.11.5/react-table.css">
 
 </head>
 
diff --git a/rowboat/constants.py b/rowboat/constants.py
index c6853a3..ed73570 100644
--- a/rowboat/constants.py
+++ b/rowboat/constants.py
@@ -24,15 +24,12 @@ EMOJI_RE = re.compile(r'<:(.+):([0-9]+)>')
 USER_MENTION_RE = re.compile('<@!?([0-9]+)>')
 
 # IDs and such
-<<<<<<< HEAD
-ROWBOAT_GUILD_ID = 343046181771018242
-ROWBOAT_USER_ROLE_ID = 351789665386364929
-ROWBOAT_CONTROL_CHANNEL = 351794308254269441
-=======
+#ROWBOAT_GUILD_ID = 343046181771018242
+#ROWBOAT_USER_ROLE_ID = 351789665386364929
+#ROWBOAT_CONTROL_CHANNEL = 351794308254269441
 ROWBOAT_GUILD_ID = 342506939340685312
 ROWBOAT_USER_ROLE_ID = 648955559541997578
 ROWBOAT_CONTROL_CHANNEL = 598682202464845845
->>>>>>> 6c46a05f1dc5c07eebfa1668e91cfed10aa6a623
 
 # Discord Error codes
 ERR_UNKNOWN_MESSAGE = 10008
diff --git a/rowboat/models/guild.py b/rowboat/models/guild.py
index 9c3e8a3..bd529d7 100644
--- a/rowboat/models/guild.py
+++ b/rowboat/models/guild.py
@@ -122,7 +122,7 @@ class Guild(BaseModel):
         try:
             bans = guild.get_bans()
         except:
-            log.exception('sync_bans failed:')
+            log.exception('sync_bans failed for Guild %s', self.guild.id)
             return
 
         log.info('Syncing %s bans for guild %s', len(bans), guild.id)
diff --git a/rowboat/models/notification.py b/rowboat/models/notification.py
index 0a07f31..3c88177 100644
--- a/rowboat/models/notification.py
+++ b/rowboat/models/notification.py
@@ -64,10 +64,10 @@ class Notification(BaseModel):
         elif self.type_ == self.Types.CONNECT:
             data['title'] = u'{} connected'.format(
                 'Production' if self.metadata['env'] == 'prod' else 'Testing')
-            data['content'] = ', '.join(self.metadata.get('trace'))
+            data['content'] = self.metadata.get('content', '').format(m=self.metadata))
         elif self.type_ == self.Types.RESUME:
             data['title'] = u'{} resumed'.format(
                 'Production' if self.metadata['env'] == 'prod' else 'Testing')
-            data['content'] = ', '.join(self.metadata.get('trace'))
+            data['content'] = self.metadata.get('content', '').format(m=self.metadata))
 
         return data
diff --git a/rowboat/models/user.py b/rowboat/models/user.py
index b1d8edb..c60e384 100644
--- a/rowboat/models/user.py
+++ b/rowboat/models/user.py
@@ -1,3 +1,5 @@
+import humanize
+
 from datetime import datetime
 from holster.enum import Enum
 from peewee import BigIntegerField, IntegerField, SmallIntegerField, TextField, BooleanField, DateTimeField
@@ -182,7 +184,6 @@ class Infraction(BaseModel):
     @classmethod
     def kick(cls, plugin, event, member, reason):
         from rowboat.plugins.modlog import Actions
-
         User.from_disco_user(member.user)
 
         # Prevent the GuildMemberRemove log event from triggering
@@ -193,6 +194,13 @@ class Infraction(BaseModel):
             user_id=member.user.id
         )
 
+        # TODO: Make these configurable.
+        member.user.open_dm().send_message(':warning: You were **{}** from {} for "{}"'.format(
+            'kicked',
+            event.guild.name,
+            reason or 'no reason'
+        ))
+
         member.kick(reason=reason)
 
         # Create a kick modlog event
@@ -224,6 +232,13 @@ class Infraction(BaseModel):
             user_id=member.user.id
         )
 
+        member.user.open_dm().send_message(':warning: You were **{}** from {} for "{}"\n\nThis will be lifted in: {}'.format(
+            'temporarily banned',
+            event.guild.name,
+            reason or 'no reason',
+            humanize.naturaldelta(expires_at - datetime.utcnow())
+        ))
+
         member.ban(reason=reason)
 
         plugin.call(
@@ -291,6 +306,12 @@ class Infraction(BaseModel):
             user_id=user_id,
         )
 
+        member.user.open_dm().send_message(':warning: You were **{}** from {} for "{}"'.format(
+            'banned',
+            event.guild.name,
+            reason or 'no reason'
+        ))
+
         guild.create_ban(user_id, reason=reason)
 
         plugin.call(
@@ -322,6 +343,12 @@ class Infraction(BaseModel):
             actor_id=event.author.id,
             type_=cls.Types.WARNING,
             reason=reason)
+            
+        member.user.open_dm().send_message(':warning: You were **{}** in {} for "{}"'.format(
+            'warned',
+            event.guild.name,
+            reason or 'no reason'
+        ))
 
         plugin.call(
             'ModLogPlugin.log_action_ext',
@@ -347,6 +374,12 @@ class Infraction(BaseModel):
 
         member.add_role(admin_config.mute_role, reason=reason)
 
+        member.user.open_dm().send_message(':warning: You were **{}** in {} for "{}"'.format(
+            'muted',
+            event.guild.name,
+            reason or 'no reason'
+        ))
+
         plugin.call(
             'ModLogPlugin.log_action_ext',
             Actions.MEMBER_MUTED,
@@ -383,6 +416,13 @@ class Infraction(BaseModel):
 
         member.add_role(admin_config.mute_role, reason=reason)
 
+        member.user.open_dm().send_message(':warning: You were **{}** in {} for "{}"\n\nThis will be lifted in: {}'.format(
+            'temporarily muted',
+            event.guild.name,
+            reason or 'no reason',
+            humanize.naturaldelta(expires_at - datetime.utcnow())
+        ))
+
         plugin.call(
             'ModLogPlugin.log_action_ext',
             Actions.MEMBER_TEMP_MUTED,
diff --git a/rowboat/plugins/admin.py b/rowboat/plugins/admin.py
index 72cec62..caff420 100644
--- a/rowboat/plugins/admin.py
+++ b/rowboat/plugins/admin.py
@@ -581,7 +581,7 @@ class AdminPlugin(Plugin):
         if member:
             self.can_act_on(event, member.id)
             if not event.config.mute_role:
-                raise CommandFail('mute is not setup on this server')
+                raise CommandFail('mute is not properly setup on this server')
 
             if event.config.mute_role in member.roles:
                 raise CommandFail(u'{} is already muted'.format(member.user))
@@ -821,7 +821,6 @@ class AdminPlugin(Plugin):
     @Plugin.command('warn', '<user:user|snowflake> [reason:str...]', level=CommandLevels.MOD)
     def warn(self, event, user, reason=None):
         member = None
-<<<<<<< HEAD
 
         member = event.guild.get_member(user)
         if member:
@@ -856,7 +855,6 @@ class AdminPlugin(Plugin):
         if size < 1 or size > 15000:
             raise CommandFail('too many messages must be between 1-15000')
 
-=======
 
         member = event.guild.get_member(user)
         if member:
@@ -891,7 +889,6 @@ class AdminPlugin(Plugin):
         if size < 1 or size > 15000:
             raise CommandFail('too many messages must be between 1-15000')
 
->>>>>>> 6c46a05f1dc5c07eebfa1668e91cfed10aa6a623
         q = Message.select(Message.id).join(User).order_by(Message.id.desc()).limit(size)
 
         if mode in ('all', 'channel'):
@@ -906,8 +903,11 @@ class AdminPlugin(Plugin):
               raise CommandFail('Cannot access channel due to permissions')
             q = q.where(Message.channel_id == cid)
         else:
+            user_id = user if isinstance(user, (int, long)) else user.id
+            if event.author.id != user_id:
+                self.can_act_on(event, user_id)
             q = q.where(
-                (Message.author_id == (user if isinstance(user, (int, long)) else user.id)) &
+                (Message.author_id == user_id) &
                 (Message.guild_id == event.guild.id)
             )
 
@@ -1060,7 +1060,6 @@ class AdminPlugin(Plugin):
                 rated = sorted([
                     (fuzz.partial_ratio(role, r.name.replace(' ', '')), r) for r in event.guild.roles.values()
                 ], key=lambda i: i[0], reverse=True)
-<<<<<<< HEAD
 
                 if rated[0][0] > 40:
                     if len(rated) == 1:
@@ -1112,7 +1111,6 @@ class AdminPlugin(Plugin):
             reason=reason or 'no reason',
         )
 
-=======
 
                 if rated[0][0] > 40:
                     if len(rated) == 1:
@@ -1164,7 +1162,6 @@ class AdminPlugin(Plugin):
             reason=reason or 'no reason',
         )
 
->>>>>>> 6c46a05f1dc5c07eebfa1668e91cfed10aa6a623
         event.msg.reply(u':ok_hand: {} role {} to {}'.format('added' if mode == 'add' else 'removed',
             role_obj.name,
             member))
diff --git a/rowboat/plugins/core.py b/rowboat/plugins/core.py
index 9f76cfe..6f35501 100644
--- a/rowboat/plugins/core.py
+++ b/rowboat/plugins/core.py
@@ -465,7 +465,7 @@ class CorePlugin(Plugin):
                         embed.title = u'Command Error: {}'.format(command.name)
                         embed.color = 0xff6961
                         embed.add_field(
-                            name='Author', value='({}) `{}`'.format(event.author, event.author.id), inline=True)
+                            name='Author', value=u'({}) `{}`'.format(event.author, event.author.id), inline=True)
                         embed.add_field(name='Channel', value='({}) `{}`'.format(
                             event.channel.name,
                             event.channel.id
diff --git a/rowboat/plugins/modlog/core.py b/rowboat/plugins/modlog/core.py
index 2d0b761..047047f 100644
--- a/rowboat/plugins/modlog/core.py
+++ b/rowboat/plugins/modlog/core.py
@@ -306,11 +306,7 @@ class ModLogPlugin(Plugin):
             return event.msg.reply(':warning: modlog is already hushed')
 
         self.hushed[event.guild.id] = True
-<<<<<<< HEAD
-        event.msg.reply(':white_check_mark: modlog has been hushed, do your dirty work in peace')
-=======
         event.msg.reply(':white_check_mark: modlog hushed, do your dirty work in peace')
->>>>>>> 6c46a05f1dc5c07eebfa1668e91cfed10aa6a623
 
     @Plugin.command('unhush', group='modlog', level=CommandLevels.ADMIN)
     def command_unhush(self, event):
@@ -318,7 +314,7 @@ class ModLogPlugin(Plugin):
             return event.msg.reply(':warning: modlog is not hushed')
 
         del self.hushed[event.guild.id]
-        event.msg.reply(':white_check_mark: modlog has been unhushed, shhhhh... nobody saw anything')
+        event.msg.reply(':white_check_mark: modlog unhushed, shhhhh... nobody saw anything')
 
     @Plugin.schedule(120)
     def cleanup_debounce(self):
diff --git a/rowboat/plugins/utilities.py b/rowboat/plugins/utilities.py
index a057342..63374e9 100644
--- a/rowboat/plugins/utilities.py
+++ b/rowboat/plugins/utilities.py
@@ -236,14 +236,6 @@ class UtilitiesPlugin(Plugin):
         content.append(u'**\u276F Server Information**')
 
         created_at = to_datetime(guild.id)
-<<<<<<< HEAD
-        content.append(u'Created: {} ago ({})'.format(
-            humanize.naturaldelta(datetime.utcnow() - created_at),
-            created_at.isoformat(),
-        ))
-        content.append(u'Members: {}'.format(len(guild.members)))
-        content.append(u'Features: {}'.format(', '.join(guild.features) or 'none'))
-=======
         content.append(u'Created: {} ({})'.format(
             humanize.naturaltime(datetime.utcnow() - created_at),
             created_at.isoformat(),
@@ -252,7 +244,6 @@ class UtilitiesPlugin(Plugin):
         content.append(u'Members: {:,}'.format(len(guild.members)))
         if guild.features:
             content.append(u'Features: {}'.format(', '.join(guild.features)))
->>>>>>> 6c46a05f1dc5c07eebfa1668e91cfed10aa6a623
 
         content.append(u'\n**\u276F Counts**')
         text_count = sum(1 for c in guild.channels.values() if not c.is_voice)
@@ -298,12 +289,16 @@ class UtilitiesPlugin(Plugin):
 
         if user.presence:
             emoji, status = get_status_emoji(user.presence)
-            content.append('Status: {} <{}>'.format(status, emoji))
+            content.append('Online Status: {} <{}>'.format(status, emoji))
             if user.presence.game and user.presence.game.name:
                 if user.presence.game.type == GameType.DEFAULT:
-                    content.append(u'Game: {}'.format(user.presence.game.name))
+                    content.append(u'Status: {}'.format(user.presence.game.name))
                 else:
-                    content.append(u'Stream: [{}]({})'.format(user.presence.game.name, user.presence.game.url))
+                    if user.presence.game.url:
+                        content.append(u'Streaming: [{}]({})'.format(user.presence.game.name, user.presence.game.url))
+                    elif:
+                        content.append(u'Streaming: {}'.format(user.presence.game.name))
+
 
         created_dt = to_datetime(user.id)
         content.append('Created: {} ago ({})'.format(
@@ -357,7 +352,7 @@ class UtilitiesPlugin(Plugin):
 
         # Wait for them all to complete (we're still going to be as slow as the
         #  slowest query, so no need to be smart about this.)
-        wait_many(newest_msg, oldest_msg, infractions, voice, timeout=10)
+        wait_many(newest_msg, oldest_msg, infractions, voice, timeout=30)
         tags = to_tags(guild_id=event.msg.guild.id)
 
         if newest_msg.value and oldest_msg.value:
-- 
2.24.1.windows.2

